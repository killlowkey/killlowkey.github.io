<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring MVC 设计与实现</title>
    <url>/2021/01/16/Spring-MVC-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>本文会对 Spring MVC 设计进行大致的描述，比如 web 服务怎么进行启动、DispatcherServlet 是怎么注入到 ServletContext 中、DispatcherServlet 是怎么处理请求，但不会涉及具体的实现细节，更多细节还需读者自行探究。</p>
<a id="more"></a>

<h2 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h2><p>下面是 HandlerMapping 接口的定义，HandlerMapping  提供一个 getHandler 方法，可以 根据请求来获取一个 HandlerExecutionChain 对象。在 HandlerExecutionChain 中包含两个重要行为，一个是请求的拦截器（HandlerInterceptor），另外一个是请求 Handler。因为我们在配置拦截器时可以指定某个路径来进行配置，将拦截器放在 HandlerExecutionChain  中可以进行解耦的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMapping</span> </span>&#123; </span><br><span class="line">	<span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来看到一个基于注解的控制器，我们定义了一个路径为 <code>/hello</code> 路由，客户端通过 GET 请求进行访问时，就向客户端返回 <code>hello world</code>。</p>
<blockquote>
<p><code>hello()</code> 方法是请求的 Handler</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello wolrd&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HandlerMapping 则管理着请求的 Handler，在 HandlerMapping#getHandler 需要传入 request 就可以获取该请求的 HandlerExecutionChain。这里不妨思考一下，我们如何去找到与之对应的 Handler 呢？其实可以根据请求的条件来进行查找，在上述代码中，<code>@GetMapping</code> 代表着我们处理 GET 请求，而 <code>/hello</code> 则为请求的路径，如果请求符合这两个条件那么就返回该 Handler。</p>
<p>在 Web Mvc 中我们定义控制器方法有很多种，不同的方法代表着 HandlerMapping  实现不同。</p>
<ol>
<li>RequestMappingHandlerMapping：注解实现</li>
<li>RouterFunctionMapping： RouterFunction Bean 实现</li>
<li>SimpleUrlHandlerMapping</li>
<li>BeanNameUrlHandlerMapping</li>
</ol>
<h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><p>DispatcherServlet 作为请求的入口点，用于将请求路由到不同的 Handler上。然而在项目中，我们定义控制器方式有很多种，也就意味着我们可能有多个 HandlerMapping 实现。DispatcherServlet 则管理这些 HandlerMapping ，用于帮助请求找到对应的 handle 并进行调用。</p>
<h3 id="doDispatch"><a href="#doDispatch" class="headerlink" title="doDispatch"></a>doDispatch</h3><p>doDispatch 作为 DispatcherServlet  核心方法，有很多事情都是在该方法中进行完成。首先会根据请求来找到对应的 Handler，如果未找到那么就向客户端返回 404 （未发现）错误。找到则对 Handler 进行适配，得到一个 HandlerAdapter 对象（不同的 HandlerMapping 适配的也不同），之后调用该 <code>HandlerAdapter#handle</code> 方法用于处理该请求，该方法返回 ModelAndView 对象。如果处理该请求的handle返回一个空的 ModelAndView  对象，那么说明我们不需要对该页面进行渲染，反之需要拿到 <code>view</code> 名称将这个页面交由渲染引擎进行渲染之后返回给客户端。</p>
<p>请求的拦截器操作也是在该方法中完成，分别在 <code>HandlerAdapter#handle</code> 方法调用前后来调用拦截器，如果该拦截器对该请求进行处理了（preHandler、postHandler 返回false），那么直接 return doDispatch 方法即可。</p>
<p>上述提到 HandlerAdapter  会对 Handler 进行适配（适配器模式），在 HandlerAdapter  中会对 request/response 进行一些增强的操作，比如对 request参数解析、response 消息转换等等，具体的细节还需读者自行探究，此处不在赘述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.DispatcherServlet#doDispatch</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);  <span class="comment">// 找到与之对应的 Handler</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response); <span class="comment">// 未找到 Handler 返回 404</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); <span class="comment">// 对 handler 进行适配</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;  <span class="comment">// 调用前置拦截器</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); <span class="comment">// 处理请求</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);  <span class="comment">// mv 不为null，则对页面进行渲染</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);  <span class="comment">// postHandler 拦截器</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理收尾工作，调用拦截器的 afterCompletion 方法</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Web服务如何与Spring容器接轨"><a href="#Web服务如何与Spring容器接轨" class="headerlink" title="Web服务如何与Spring容器接轨"></a>Web服务如何与Spring容器接轨</h2><h3 id="容器-onRefresh-方法"><a href="#容器-onRefresh-方法" class="headerlink" title="容器 onRefresh 方法"></a>容器 onRefresh 方法</h3><p><code>AbstractApplicationContext#onRefresh</code> 方法给子类提供了一个扩展点，用于去初始化其他 Bean。web服务本质是一个 spring 容器，所以会去继承 <code>AbstractApplicationContext</code>，之后在 onRefresh 方法中来启动 web 服务。</p>
<h3 id="启动-web-Server"><a href="#启动-web-Server" class="headerlink" title="启动 web Server"></a>启动 web Server</h3><blockquote>
<p>AnnotationConfigServletWebServerApplicationContext 是基于注解实现的 Servlet web 容器</p>
</blockquote>
<p>之后我们一起去探究 Servlet web 服务是如何进行启动的，首先来看到 <code>AnnotationConfigServletWebServerApplicationContext@onRefresh()</code> 方法，在该方法中会去调用 <code>createWebServer()</code> 来创建 web 服务，我们这里只需关注该方法即可。</p>
<p>首先会去获取本地的 webServer，如果当前 web 服务并未初始化，那么通过 ServletWebServerFactory 方法传递 ServletContextInitializer 来创建一个 web 服务。之后向 Spring 容器中注入 WebServerGracefulShutdownLifecycle（web容器销毁时收尾工作）、WebServerStartStopLifecycle （用于启动web Server），这两个 Bean 都是依赖 spring 生命周期来进行实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#createWebServer</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createWebServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebServer webServer = <span class="keyword">this</span>.webServer;</span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    <span class="keyword">if</span> (webServer == <span class="keyword">null</span> &amp;&amp; servletContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ServletWebServerFactory factory = getWebServerFactory();</span><br><span class="line">        <span class="keyword">this</span>.webServer = factory.getWebServer(getSelfInitializer());</span><br><span class="line">        getBeanFactory().registerSingleton(<span class="string">&quot;webServerGracefulShutdown&quot;</span>,</span><br><span class="line">                                           <span class="keyword">new</span> WebServerGracefulShutdownLifecycle(<span class="keyword">this</span>.webServer));</span><br><span class="line">        getBeanFactory().registerSingleton(<span class="string">&quot;webServerStartStop&quot;</span>,</span><br><span class="line">                                           <span class="keyword">new</span> WebServerStartStopLifecycle(<span class="keyword">this</span>, <span class="keyword">this</span>.webServer));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getSelfInitializer().onStartup(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;Cannot initialize servlet context&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    initPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web server 创建细节我们不进行探究，主要是对 web Server 启动来进行讲解，在 WebServerStartStopLifecycle 中，该对象实现了 SmartLifecycle 接口，该接口会在spring 容器启动之后进行回调，在这回调期间会将 web Server 进行启动。web server 启动后通过一个标志位（running）标识该 web server 已经启动，然后广播一个 ServletWebServerInitializedEvent 事件用于在其它地方做一些额外工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle#start</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.webServer.start();</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.applicationContext</span><br><span class="line">        .publishEvent(<span class="keyword">new</span> ServletWebServerInitializedEvent(<span class="keyword">this</span>.webServer, <span class="keyword">this</span>.applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="将组件融合到ServletContext中"><a href="#将组件融合到ServletContext中" class="headerlink" title="将组件融合到ServletContext中"></a>将组件融合到ServletContext中</h2><blockquote>
<p><code>ServletContextInitializer#onStartup</code> 会在 <code>TomcatStarter#onStartup</code> 进行调用，对于具体实现细节请读者执行探究</p>
</blockquote>
<p>在 web Server 启动时，spring 还给我们留下了一个扩展点（<code>ServletContextInitializer</code>），该接口会在web容器启动时进行回调，而我们声明的 Filter、Servlet 组件也是在此时注册到 ServletContext 中。</p>
<h3 id="Filter-、Servlet、Listener-原生组件注册"><a href="#Filter-、Servlet、Listener-原生组件注册" class="headerlink" title="Filter 、Servlet、Listener 原生组件注册"></a>Filter 、Servlet、Listener 原生组件注册</h3><p>Servlet 提供 <code>@WebFilter</code>、<code>@WebServlet</code>、<code>@WebListener</code> 三个注解，用于注册 Servlet 原生组件。通过注解来注册Servlet原生组件需要通过 <code>@ServletComponentScan</code> 注解来扫描指定包，在该注解中会引入一个 <code>ServletComponentScanRegistrar</code> 组件来向Spring 容器注册一个 <code>ServletComponentRegisteringPostProcessor</code> 实例用于，该实例是 BeanFactoryPostProcessor 接口的实现，之后对接口进行回调时，会扫描指定包下组件封装成 <code>*RegistrationBean</code> 注入到 Spring 容器中 。<code>*RegistrationBean </code>类型的接口可以在生命周期回调时进行组件的注册，如果我们需要基于组件来进行扩展，那么可以参考 *RegistrationBean 实现。</p>
<p>下面通过讲解 Filter 组件注册，来实现举一反三的目的。通过 <code>WebFilterHandler#doHandle</code> 方法将组件封装成一个 FilterRegistrationBean 对象，该对象 是 ServletContextInitializer 接口实现，会在 Web 容器进行初始化时回调该接口，之后通过 <code>ServletContext#addFilter</code> 来添加 Filter 组件。具体细节还请读者自行探究，此处不在赘述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//org.springframework.boot.web.servlet.ServletComponentRegisteringPostProcessor#scanPackage</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanPackage</span><span class="params">(ClassPathScanningCandidateComponentProvider componentProvider, String packageToScan)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinition candidate : componentProvider.findCandidateComponents(packageToScan)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ServletComponentHandler handler : HANDLERS) &#123;</span><br><span class="line">                handler.handle(((AnnotatedBeanDefinition) candidate),</span><br><span class="line">                               (BeanDefinitionRegistry) <span class="keyword">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.servlet.ServletComponentHandler#handle</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(AnnotatedBeanDefinition beanDefinition, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; attributes = beanDefinition.getMetadata()</span><br><span class="line">        .getAnnotationAttributes(<span class="keyword">this</span>.annotationType.getName());</span><br><span class="line">    <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        doHandle(attributes, beanDefinition, registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.boot.web.servlet.WebFilterHandler#doHandle</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(Map&lt;String, Object&gt; attributes, AnnotatedBeanDefinition beanDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">                     BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(FilterRegistrationBean.class);</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;asyncSupported&quot;</span>, attributes.get(<span class="string">&quot;asyncSupported&quot;</span>));</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;dispatcherTypes&quot;</span>, extractDispatcherTypes(attributes));</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;filter&quot;</span>, beanDefinition);</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;initParameters&quot;</span>, extractInitParameters(attributes));</span><br><span class="line">    String name = determineName(attributes, beanDefinition);</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;servletNames&quot;</span>, attributes.get(<span class="string">&quot;servletNames&quot;</span>));</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;urlPatterns&quot;</span>, extractUrlPatterns(attributes));</span><br><span class="line">    registry.registerBeanDefinition(name, builder.getBeanDefinition());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="DispatcherServlet-注册"><a href="#DispatcherServlet-注册" class="headerlink" title="DispatcherServlet 注册"></a>DispatcherServlet 注册</h3><p>上述描述了基于注解方式来注册 Servlet 原生组件，DispatcherServlet  作为所有请求入口点，那么也需要注册到 ServletContext中。DispatcherServlet 与基于注解注册实现类似，都是通过 *RegistrationBean 来进行的。</p>
<p>首先声明一个 DispatcherServlet  Bean，然后将该 Bean 封装成一个 DispatcherServletRegistrationBean Bean，最后依靠 ServletContextInitializer 回调将该 DispatcherServlet  注册到 ServletContext 中。</p>
<p>此时 MVC 就与 Tomcat 进行接轨了， Tomcat 接收到请求时，请求通过 Filter Chain 后，之后通过 DispatchServlet 对请求进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DispatcherServletConfiguration#dispatcherServlet</span></span><br><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DispatcherServlet <span class="title">dispatcherServlet</span><span class="params">(WebMvcProperties webMvcProperties)</span> </span>&#123;</span><br><span class="line">    DispatcherServlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line">    dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class="line">    dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class="line">    dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class="line">    dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class="line">    dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class="line">    <span class="keyword">return</span> dispatcherServlet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration</span></span><br><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet dispatcherServlet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                       WebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> </span>&#123;</span><br><span class="line">    DispatcherServletRegistrationBean registration = <span class="keyword">new</span> DispatcherServletRegistrationBean(dispatcherServlet,</span><br><span class="line">                                                                                           webMvcProperties.getServlet().getPath());</span><br><span class="line">    registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">    registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">    multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>spring</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
</search>
